{
  "title": "How to use html input fields",
  "description": "This will show you 2 ways on how to use the input fields while using angular",
  "text": "There are time when you need not just to display but also take inputs and what good are they good for if you cant use them in the code.\nAnd for the here are 2 ways on how to do it one is by using the \"ViewChild\" in the Ts script and the other would be the \" [(ngModel)]\" in the html file.\n\nThe ngModel is not part of your starting project by default so you have to import it in the app.module.ts file first together with the FormsModule in order for you can use it.\n\n[code] \n//app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HowToInputFieldComponent } from './com/how-to-input-field/how-to-input-field.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HowToInputFieldComponent,\n  ],\n  imports: [BrowserModule, AppRoutingModule, FormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n[/code]\n[code] \n//Ts File\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-how-to-input-field',\n  templateUrl: './how-to-input-field.component.html',\n  styleUrls: ['./how-to-input-field.component.css'],\n})\nexport class HowToInputFieldComponent implements OnInit {\n  @ViewChild('secondInput') secondInput: ElementRef;\n\n  theFirst: string = '';\n  theSecond: string = '';\n\n  constructor() {}\n\n  ngOnInit(): void {}\n  //Get the value from the viewchild and asignt it to theSecond\n  updateSecond(): void {\n    this.theSecond = this.secondInput.nativeElement.value;\n  }\n}\n[/code]\n[code] \n//HTML File\n<div>\n  <!-- First method using ngModel -->\n  <label for=\"first\">This would be the ngModel</label>\n  <br />\n  <input\n    type=\"text\"\n    name=\"first\"\n    [(ngModel)]=\"theFirst\"\n    placeholder=\"First...\"\n  />\n  <p>value 1: {{ theFirst }}</p>\n  <p [innerText]=\"theFirst\"></p>\n  <!-- Second method using ViewChild -->\n  <label for=\"second\"> This would be the ViewChild</label>\n  <br />\n  <input type=\"text\" \n  #secondInput \n  name=\"second\" \n  placeholder=\"Second...\" \n  />\n  <br />\n  <button (click)=\"updateSecond()\">Check Input Value</button>\n  <p>value 2: {{ theSecond }}</p>\n  <p [innerText]=\"theSecond\"></p>\n</div>\n\n[/code]\nThis is how this code would look like:\n<img src=\"https://i.imgur.com/SBx0gvS.png\"/>\nWith the ngModule the variable is updated every time the input value is changed.\n<img src=\"https://i.imgur.com/mF4Tt9r.png\"/>\nBut with the ViewChild it's just keeping track to the input reference and thus the variable is not updated.\n<img src=\"https://i.imgur.com/9DvgZjj.png\"/>\nYou could add (onChange) in the html input field but for this example i just added a button for that.\n(after pressiong the button the variable is updated)\n<img src=\"https://i.imgur.com/OJg3DnT.png\"/>\n\n\n",
  "content": []
}